#include <iostream>
#include <set>
using namespace std;

void print(set<int> &A) {
    for (auto i : A) cout << i << " ";
    cout << "\n";
}

int main() {
    set<int> s = {1, 4, 2, 5, 8, 10, 0, 4, 7, 2, 7, 4};
    cout << "Example Set : \n";
    print(s);
    cout << "\n";

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Iteraters
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // .begin() returns pointer to beginning of set
    // .end() returns pointer to end of set
    // Iterator can't be increased as (it += 6) but we can use (it++) and (it--)
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------

    set<int>::iterator it;

    for (it = s.begin(); it != s.end(); it++) cout << *it << " ";
    cout << "\n";

    it = s.begin();
    cout << *it << "\n";

    it++;
    cout << *it << "\n";

    it = s.end();  // .end() returns iterator to second last element
    cout << *it << "\n";

    it++;
    cout << *it << "\n";

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Size, clear, empty
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------

    // cout << s.size() << "\n";
    // if (!s.empty()) cout << "Not Empty\n";
    // s.clear();
    // if (s.empty()) cout << "Empty\n";

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Insert
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Inserts element at its correct lexographical location
    // Does not insert a repeating element
    // Once an element is inserted into a set, all iterators to the set are
    // invalidated
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------

    // s.insert(3);
    // print(s);

    // set<int>::iterator it;

    // it = s.begin();
    // if (*it == 0) s.insert(6);
    // print(s);

    // it = s.begin();  // Revalidating iterater after using insert command
    // if (*it == 0) s.insert(9);
    // print(s);

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Erase
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Accepts a value that you want to erase from the set
    // Accepts an iterator to erase the value at which the iterator is
    // pointing Once an element is deleted from a set, all iterators to the
    // set are invalidated
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------

    // s.erase(0);
    // print(s);

    // s.erase(s.begin()); // We can't use this command -> s.erase(s.end())
    // print(s);

    // set<int>::iterator it;

    // for (it = s.begin(); it != s.end();) {
    //     if (*it % 2 == 0)
    //         it = s.erase(it);  // Validating iterator after using erase
    //         command
    //     else
    //         it++;
    // }
    // print(s);

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Count
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Tells the count of given argument
    // It is either 0 or 1 as set does not allow duplicates
    // Can be used as bool value
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------

    // cout << s.count(0) << " " << s.count(3) << "\n";
    // set<int>::iterator it;

    // if (s.count(4)) it = s.find(4);
    // it--;
    // s.erase(it);

    // print(s);

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Find
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Returns iterator to the element to be found
    // Points to .end() if the searched element is not found
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------

    // set<int>::iterator it = s.find(4);

    // for (it; it != s.end(); it++) {
    //     cout << *it << " ";
    // }
    // cout << "\n";

    // it = s.find(3);  // Returns iterator to s.end()

    // cout << *it << "\n";

    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // Lower bound and upper bound
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // LB - Returns an iterator to the first element (greater or equal to) key.
    // UB - Returns an iterator to the first element (greater) than key.
    //--------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------
    // cout << *s.lower_bound(3) << "\n";
    // cout << *s.upper_bound(3) << "\n";
    // cout << *s.lower_bound(2) << "\n";
    // cout << *s.upper_bound(2) << "\n";
    // cout << *s.lower_bound(6) << "\n";
    // cout << *s.upper_bound(6) << "\n";

    return 0;
}